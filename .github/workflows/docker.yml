name: Build, push, and test container

# Use this workflow to:
# - Manually build and push from a branch
# - Automatically build and push on certain changes
# - Automatically test new/udpated deployments

# TODO: Automate build and push for cutting a release

on:
  # Run when manually triggered
  workflow_dispatch:

  # Run when one of these files change in main
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - entrypoint.sh
      - requirements.txt
      - octodns-requirements.txt
      - .github/workflows/docker.yml

  # Run when a version tag is pushed
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      fullref: ${{ steps.gettagver.outputs.fullref }}
      shortref: ${{ steps.gettagver.outputs.shortref }}
      sharef: ${{ steps.gettagver.outputs.sharef }}
      tagbuilt: ${{ steps.buildimage.outputs.tagbuilt }}
      tagpushed: ${{ steps.pushimage.outputs.tagpushed }}

    steps:
      - uses: actions/checkout@v2

      - name: Get tag versions
        id: gettagver
        run: |
          _full_ref="${{ github.ref }}"
          _short_ref=
          _sha_ref="${{ github.sha }}"

          if [[ "${_full_ref}" == "refs/heads/"* ]]; then
            _short_ref=${_full_ref#refs/heads/}

          elif [[ "${_full_ref}" == "refs/tags/"* ]]; then
            _short_ref=${_full_ref#refs/tags/}

          else
            echo "FAIL: Did not recognize GITHUB_REF '${_full_ref}'."
            exit 1
          fi

          echo "Set fullref to '${_full_ref}'."
          echo "Set shortref to '${_short_ref}'."
          echo "Set sharef to '${_sha_ref}'."
          echo "::set-output name=fullref::${_full_ref}"
          echo "::set-output name=shortref::${_short_ref}"
          echo "::set-output name=sharef::${_sha_ref}"

      - name: Build image
        id: buildimage
        run: |
          _image_ver="${{ steps.gettagver.outputs.sharef }}"
          _image_tag="ghcr.io/${IMAGE_NAME}:${_image_ver}"

          if [ -r ./Dockerfile ]; then
            echo "Found ./Dockerfile OK."
          else
            echo "FAIL: ./Dockerfile not readable."
            exit 1
          fi

          if docker build . -q -t "${_image_tag}"; then
            echo "Built '${_image_tag}' OK."
          else
            echo "FAIL: Failed to build '${_image_tag}'."
            exit 1
          fi

          echo "Set tagbuilt to '${_image_tag}'."
          echo "::set-output name=tagbuilt::${_image_tag}"

      - name: Login to ghcr.io
        run: |
          echo "${{ secrets.PAT }}" | \
          docker login ghcr.io \
          -u ${{ github.actor }} --password-stdin

      - name: Push image and tags to ghcr.io
        # TODO: Decide when/where/how to push major tag
        id: pushimage
        run: |
          _built_tag="${{ steps.buildimage.outputs.tagbuilt }}"
          _tags="${_built_tag}"
          _image_ver="${{ steps.gettagver.outputs.shortref }}"
          _full_ref="${{ steps.gettagver.outputs.fullref }}"

          if [ "${_image_ver}" = "main" ]; then
            _image_ver=latest
            _tags="${_tags} ${_built_tag%:*}:${_image_ver}"
          elif [[ "${_full_ref}" == "refs/tags/v"* ]]; then
            _image_ver=${_full_ref#refs/tags/v}
            _tags="${_tags} ${_built_tag%:*}:${_image_ver}"
          fi

          for _tag in ${_tags}; do
            if docker tag "${_built_tag}" "${_tag}"; then
              echo "Tagged '${_tag}' OK."
            else
              echo "FAIL: Failed to tag '${_tag}'."
              exit 1
            fi
            if docker push "${_tag}"; then
              echo "Pushed '${_tag}' OK."
            else
              echo "FAIL: Failed to push '${_tag}'."
              exit 1
            fi
          done

          echo "Set tagpushed to '${_built_tag}'."
          echo "::set-output name=tagpushed::${_built_tag}"

  test-published-action:
    needs: build-and-push
    env:
      _tag_pushed: "${{ needs.build-and-push.outputs.tagpushed }}"
      _short_ref: "${{ needs.build-and-push.outputs.shortref }}"
    runs-on: ubuntu-latest

    outputs:
      actionat: ${{ steps.findaction.outputs.actionat }}
      tagpulled: ${{ steps.pullimage.outputs.tagpulled }}

    steps:
      - uses: actions/checkout@v2

      # TODO: Make this step :point_down: actually work
      # Is the Action available at this reference?
      - name: Verify Action is available
        id: findaction
        run: |
          # _short_ref is set in this job's env
          _actionat="${IMAGE_NAME}@${_short_ref}"
          echo "Set actionat to '${_actionat}'."
          echo "::set-output name=actionat::${_actionat}"

      # Is the Docker image publicly available at this reference?
      - name: Verify Docker image is available
        id: pullimage
        run: |
          # _tag_pushed is set in this job's env
          docker logout "${_tag_pushed%%/*}"
          if docker pull -q "${_tag_pushed}"; then
            echo "Pulled '${_tag_pushed}' OK."
          else
            echo "FAIL: Failed to pull '${_tag_pushed}'."
            exit 1
          fi
          echo "Set tagpulled to '${_tag_pushed}'."
          echo "::set-output name=tagpulled::${_tag_pushed}"

      # TODO: Make these steps :point_down: actually work
      # Run the ghcr.io image with sample data
      # Run the locally built image with sample data
