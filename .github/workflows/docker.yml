name: Build, push, and test container

# Use this workflow to:
# - Manually build and push from a branch
# - Automatically build and push on certain changes
# - Automatically test new/udpated deployments

# TODO: Automate build and push for cutting a release

# TODO: Decide when/where/how to push major tag

on:
  # Run when manually triggered
  workflow_dispatch:

  # Run when one of these files change
  push:
    paths:
      - Dockerfile
      - entrypoint.sh
      - requirements.txt
      - octodns-requirements.txt
      - .github/workflows/docker.yml

  # Run when a version tag is pushed
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      fullref: ${{ steps.getshortref.outputs.fullref }}
      shortref: ${{ steps.getshortref.outputs.shortref }}
      tagbuilt: ${{ steps.buildimage.outputs.tagbuilt }}
      tagpushed: ${{ steps.pushimage.outputs.tagpushed }}

    steps:
      - uses: actions/checkout@v2

      # Get the short reference name
      - name: Get the short reference name
        id: getshortref
        run: |
          _short_ref=
          # If GITHUB_REF is a branch, use the branch name.
          if [[ "${GITHUB_REF}" == "refs/heads/"* ]]; then
            _short_ref=${GITHUB_REF#refs/heads/}
          # If GITHUB_REF looks like a version, use the tag name
          # after the leading v. So vX.Y.Z becomes X.Y.Z
          elif [[ "${GITHUB_REF}" == "refs/tags/v"* ]]; then
            _short_ref=${GITHUB_REF#refs/tags/v}
          # If GITHUB_REF didn't match either of those rules, :scream:
          else
            echo "FAIL: Did not recognize GITHUB_REF '${GITHUB_REF}'."
            exit 1
          fi
          echo "Set fullref to '${GITHUB_REF}'."
          echo "Set shortref to '${_short_ref}'."
          echo "::set-output name=fullref::${GITHUB_REF}"
          echo "::set-output name=shortref::${_short_ref}"

      - name: Build image
        id: buildimage
        run: |
          _short_ref="${{ steps.getshortref.outputs.shortref }}"
          if [ "${_short_ref}" = "main" ]; then
            _short_ref=latest
          fi
          _image_tag="ghcr.io/${IMAGE_NAME}:${_short_ref}"
          if [ -r ./Dockerfile ]; then
            echo "Found ./Dockerfile OK."
          else
            echo "FAIL: ./Dockerfile not readable."
            exit 1
          fi
          if docker build . -q -t "${_image_tag}"; then
            echo "Built '${_image_tag}' OK."
          else
            echo "FAIL: Failed to build '${_image_tag}'."
            exit 1
          fi
          echo "::set-output name=tagbuilt::${_image_tag}"

      - name: Login to ghcr.io
        run: |
          echo "${{ secrets.PAT }}" | \
          docker login ghcr.io \
          -u ${{ github.actor }} --password-stdin

      - name: Push image to ghcr.io
        id: pushimage
        run: |
          _image_tag="${{ steps.buildimage.outputs.tagbuilt }}"
          if docker push "${_image_tag}"; then
            echo "Pushed '${_image_tag}' OK."
          else
            echo "FAIL: Failed to push '${_image_tag}'."
            exit 1
          fi
          echo "::set-output name=tagpushed::${_image_tag}"

  test-published-action:
    needs: build-and-push
    env:
      _tag_pushed: "${{ needs.build-and-push.outputs.tagpushed }}"
      _short_ref: "${{ needs.build-and-push.outputs.shortref }}"
    runs-on: ubuntu-latest

    outputs:
      actionat: ${{ steps.findaction.outputs.actionat }}
      tagpulled: ${{ steps.pullimage.outputs.tagpulled }}

    steps:
      - uses: actions/checkout@v2

      # TODO: Make this step :point_down: actually work
      # Is the Action available at this reference?
      - name: Verify Action is available
        id: findaction
        run: |
          # _short_ref is set in this job's env
          _actionat="${IMAGE_NAME}@${_short_ref}"
          echo "::set-output name=actionat::${_actionat}"

      # Is the Docker image publicly available at this reference?
      - name: Verify Docker image is available
        id: pullimage
        run: |
          # _tag_pushed is set in this job's env
          docker logout "${_tag_pushed%%/*}"
          if docker pull -q "${_tag_pushed}"; then
            echo "Pulled '${_tag_pushed}' OK."
          else
            echo "FAIL: Failed to pull '${_tag_pushed}'."
            exit 1
          fi
          echo "::set-output name=tagpulled::${_tag_pushed}"

      # TODO: Make these steps :point_down: actually work
      # Run the ghcr.io image with sample data
      # Run the locally built image with sample data
